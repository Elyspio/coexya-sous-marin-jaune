//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from "axios";
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from "axios";

export class BurgerClient {
	private instance: AxiosInstance;
	private baseUrl: string;
	protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

	constructor(baseUrl?: string, instance?: AxiosInstance) {
		this.instance = instance ? instance : axios.create();

		this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4000";
	}

	getAll(cancelToken?: CancelToken | undefined): Promise<Burger[]> {
		let url_ = this.baseUrl + "/api/burgers";
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGetAll(_response);
			});
	}

	protected processGetAll(response: AxiosResponse): Promise<Burger[]> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<Burger[]>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<Burger[]>(null as any);
	}
}

export class OrderClient {
	private instance: AxiosInstance;
	private baseUrl: string;
	protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

	constructor(baseUrl?: string, instance?: AxiosInstance) {
		this.instance = instance ? instance : axios.create();

		this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4000";
	}

	getAll2(cancelToken?: CancelToken | undefined): Promise<Order[]> {
		let url_ = this.baseUrl + "/api/orders";
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGetAll2(_response);
			});
	}

	protected processGetAll2(response: AxiosResponse): Promise<Order[]> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<Order[]>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<Order[]>(null as any);
	}

	getForUser(user: string, cancelToken?: CancelToken | undefined): Promise<Order[]> {
		let url_ = this.baseUrl + "/api/orders/users/{user}";
		if (user === undefined || user === null) throw new Error("The parameter 'user' must be defined.");
		url_ = url_.replace("{user}", encodeURIComponent("" + user));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGetForUser(_response);
			});
	}

	protected processGetForUser(response: AxiosResponse): Promise<Order[]> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<Order[]>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<Order[]>(null as any);
	}

	create(user: string, cancelToken?: CancelToken | undefined): Promise<Order> {
		let url_ = this.baseUrl + "/api/orders/users/{user}";
		if (user === undefined || user === null) throw new Error("The parameter 'user' must be defined.");
		url_ = url_.replace("{user}", encodeURIComponent("" + user));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "POST",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processCreate(_response);
			});
	}

	protected processCreate(response: AxiosResponse): Promise<Order> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 201) {
			const _responseText = response.data;
			let result201: any = null;
			let resultData201 = _responseText;
			result201 = JSON.parse(resultData201);
			return Promise.resolve<Order>(result201);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<Order>(null as any);
	}

	delete(order: string, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/orders/{order}";
		if (order === undefined || order === null) throw new Error("The parameter 'order' must be defined.");
		url_ = url_.replace("{order}", encodeURIComponent("" + order));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "DELETE",
			url: url_,
			headers: {},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processDelete(_response);
			});
	}

	protected processDelete(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	updateOrder(orderId: string, order: Order, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/orders/{orderId}";
		if (orderId === undefined || orderId === null) throw new Error("The parameter 'orderId' must be defined.");
		url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(order);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "PUT",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processUpdateOrder(_response);
			});
	}

	protected processUpdateOrder(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	updateOrderPaymentReceived(idOrder: string, type: OrderPaymentType, value: number, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/orders/{idOrder}/payment/{type}/received";
		if (idOrder === undefined || idOrder === null) throw new Error("The parameter 'idOrder' must be defined.");
		url_ = url_.replace("{idOrder}", encodeURIComponent("" + idOrder));
		if (type === undefined || type === null) throw new Error("The parameter 'type' must be defined.");
		url_ = url_.replace("{type}", encodeURIComponent("" + type));
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(value);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "PUT",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processUpdateOrderPaymentReceived(_response);
			});
	}

	protected processUpdateOrderPaymentReceived(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status === 401) {
			const _responseText = response.data;
			return throwException("Unauthorized", status, _responseText, _headers);
		} else if (status === 403) {
			const _responseText = response.data;
			return throwException("Forbidden", status, _responseText, _headers);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}
}

export class UserClient {
	private instance: AxiosInstance;
	private baseUrl: string;
	protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

	constructor(baseUrl?: string, instance?: AxiosInstance) {
		this.instance = instance ? instance : axios.create();

		this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:4000";
	}

	mergeUsers(user: string, users: string[], cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/users/{user}/merge";
		if (user === undefined || user === null) throw new Error("The parameter 'user' must be defined.");
		url_ = url_.replace("{user}", encodeURIComponent("" + user));
		url_ = url_.replace(/[?&]$/, "");

		const content_ = JSON.stringify(users);

		let options_: AxiosRequestConfig = {
			data: content_,
			method: "PATCH",
			url: url_,
			headers: {
				"Content-Type": "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processMergeUsers(_response);
			});
	}

	protected processMergeUsers(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status === 401) {
			const _responseText = response.data;
			return throwException("Unauthorized", status, _responseText, _headers);
		} else if (status === 403) {
			const _responseText = response.data;
			return throwException("Forbidden", status, _responseText, _headers);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	soldUser(user: string, cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/users/{user}/sold";
		if (user === undefined || user === null) throw new Error("The parameter 'user' must be defined.");
		url_ = url_.replace("{user}", encodeURIComponent("" + user));
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "PUT",
			url: url_,
			headers: {},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processSoldUser(_response);
			});
	}

	protected processSoldUser(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status === 401) {
			const _responseText = response.data;
			return throwException("Unauthorized", status, _responseText, _headers);
		} else if (status === 403) {
			const _responseText = response.data;
			return throwException("Forbidden", status, _responseText, _headers);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	soldAllUsers(cancelToken?: CancelToken | undefined): Promise<void> {
		let url_ = this.baseUrl + "/api/users/sold";
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "PATCH",
			url: url_,
			headers: {},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processSoldAllUsers(_response);
			});
	}

	protected processSoldAllUsers(response: AxiosResponse): Promise<void> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 204) {
			const _responseText = response.data;
			return Promise.resolve<void>(null as any);
		} else if (status === 401) {
			const _responseText = response.data;
			return throwException("Unauthorized", status, _responseText, _headers);
		} else if (status === 403) {
			const _responseText = response.data;
			return throwException("Forbidden", status, _responseText, _headers);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<void>(null as any);
	}

	getUsers(cancelToken?: CancelToken | undefined): Promise<User[]> {
		let url_ = this.baseUrl + "/api/users";
		url_ = url_.replace(/[?&]$/, "");

		let options_: AxiosRequestConfig = {
			method: "GET",
			url: url_,
			headers: {
				Accept: "application/json",
			},
			cancelToken,
		};

		return this.instance
			.request(options_)
			.catch((_error: any) => {
				if (isAxiosError(_error) && _error.response) {
					return _error.response;
				} else {
					throw _error;
				}
			})
			.then((_response: AxiosResponse) => {
				return this.processGetUsers(_response);
			});
	}

	protected processGetUsers(response: AxiosResponse): Promise<User[]> {
		const status = response.status;
		let _headers: any = {};
		if (response.headers && typeof response.headers === "object") {
			for (let k in response.headers) {
				if (response.headers.hasOwnProperty(k)) {
					_headers[k] = response.headers[k];
				}
			}
		}
		if (status === 200) {
			const _responseText = response.data;
			let result200: any = null;
			let resultData200 = _responseText;
			result200 = JSON.parse(resultData200);
			return Promise.resolve<User[]>(result200);
		} else if (status !== 200 && status !== 204) {
			const _responseText = response.data;
			return throwException("An unexpected server error occurred.", status, _responseText, _headers);
		}
		return Promise.resolve<User[]>(null as any);
	}
}

export interface Burger {
	ingredients: string[];
	name: string;
}

export interface OrderBase {
	burgers: BurgerRecord[];
	user: string;
	date: string;
	student: boolean;
	drink?: Drink | undefined;
	fries?: Fries | undefined;
	dessert?: Dessert | undefined;
	payments: OrderPayment[];
	price: number;
}

export interface Order extends OrderBase {
	id: string;
}

export interface BurgerRecord {
	name: string;
	excluded: string[];
	vegetarian: boolean;
	xl: boolean;
	comment?: string | undefined;
}

export enum Drink {
	Coca = "Coca",
	CocaZero = "CocaZero",
	IceTea = "IceTea",
	Limonade = "Limonade",
}

export interface Fries {
	sauces: Sauce[];
}

export enum Sauce {
	Ketchup = "Ketchup",
	Mayo = "Mayo",
}

export enum Dessert {
	Cookie = "Cookie",
	Brookie = "Brookie",
}

export interface OrderPayment {
	type: OrderPaymentType;
	amount: number;
	received?: number | undefined;
}

export enum OrderPaymentType {
	Paypal = "Paypal",
	LunchVoucher = "LunchVoucher",
	BankTransfer = "BankTransfer",
	Cash = "Cash",
	Admin = "Admin",
}

export interface User {
	name: string;
	sold: number;
}

export class ApiException extends Error {
	override message: string;
	status: number;
	response: string;
	headers: { [key: string]: any };
	result: any;

	constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {
		super();

		this.message = message;
		this.status = status;
		this.response = response;
		this.headers = headers;
		this.result = result;
	}

	protected isApiException = true;

	static isApiException(obj: any): obj is ApiException {
		return obj.isApiException === true;
	}
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any }, result?: any): any {
	if (result !== null && result !== undefined) throw result;
	else throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
	return obj && obj.isAxiosError === true;
}
